// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  uuid                String                @id @default(uuid())
  name                String          
  email               String                @unique
  password            String          
  status              user_status           @default(ACTIVE)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  notifications       notifications[]
  group_member        group_members[]
}

enum user_status {
  ACTIVE
  INACTIVE
}

model notifications {
  id                  Int            @id @default(autoincrement())
  user                user           @relation(fields: [userId], references: [uuid])  
  userId              String         
  title               String          
  description         String?
  read                Boolean?       @default(false)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
}

model groups {
  uuid                String            @id @default(uuid())
  title               String
  description         String?
  visibility          group_status      @default(PUBLIC)
  members             group_members[]
  links               group_links[]
  posts               group_posts[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

enum group_status {
  PUBLIC
  PRIVATE
}

model group_links {
  id                  String            @id @default(uuid())
  title               String            
  url                 String          
  groups              groups            @relation(fields: [groupId], references: [uuid], onDelete: Cascade)
  groupId             String
}

model group_members {
  id                  String                   @id @default(uuid())
  groups              groups                   @relation(fields: [groupId], references: [uuid], onDelete: Cascade)
  groupId             String
  user                user                     @relation(fields: [userId], references: [uuid], onDelete: Cascade) 
  userId              String
  posts               group_posts[]
  comments            group_posts_comments[]
  type                member_type              @default(MEMBER)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

enum member_type {
  STAFF
  MEMBER
}

model group_posts {
  id                   String                  @id @default(uuid())
  member               group_members           @relation(fields: [memberId], references: [id], onDelete:Cascade, onUpdate: Cascade)
  memberId             String
  group                groups                  @relation(fields: [groupId], references: [uuid], onDelete: Cascade)
  groupId              String
  content              String                  @db.Text
  comments             group_posts_comments[]
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

model group_posts_comments {
  id                   String                  @id @default(uuid())
  post                 group_posts             @relation(fields: [postId], references: [id], onDelete:Cascade, onUpdate: Cascade)
  postId               String
  member               group_members           @relation(fields: [memberId], references: [id], onDelete:Cascade, onUpdate: Cascade)
  memberId             String
  content              String                  @db.Text
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}